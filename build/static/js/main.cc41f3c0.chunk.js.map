{"version":3,"sources":["Api.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","display","flexWrap","padding","overflow","primary","gridList","width","height","cellHeight","justifyContent","alignItems","spacing","rootButton","flexGrow","img","border","borderColor","borderRadius","menuButton","marginRight","buttons","flexDirection","margin","paddingBottom","DenseAppBar","AppBar","position","Toolbar","variant","maxWidth","Typography","color","Api","props","prevButton","nextButton","classes","useState","url","setUrl","data","setData","useEffect","a","axios","result","fetchData","window","scrollTo","top","behavior","res","map","tile","idx","GridListTile","key","comic_link","className","src","alt","comic_title","previous","Button","onClick","next","Container","GridList","cols","ButtonGroup","aria-label","Boolean","location","hostname","match","createMuiTheme","palette","main","secondary","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.cc41f3c0.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\n//Material UI components\nimport { makeStyles } from '@material-ui/core/styles';\nimport GridList from '@material-ui/core/GridList';\nimport GridListTile from '@material-ui/core/GridListTile';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport ButtonGroup from '@material-ui/core/ButtonGroup'\nimport Button from '@material-ui/core/Button';\nimport axios from 'axios';\nimport Container from \"@material-ui/core/Container\"\nimport './Api.css';\n\n\n//Material UI theme\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        // justifyContent: 'center',\n        padding: \"25px\",\n        overflow: 'hidden',\n        // backgroundColor: theme.palette.background.default,\n        primary: \"blue\",\n    },\n    gridList: {\n      width: \"100%\",\n      height: \"100%\",\n      cellHeight: 'auto',\n      justifyContent:\"center\",\n      alignItems:\"center\",\n      spacing: 8,\n      \n    },\n    rootButton: {\n        flexGrow: 1,\n      },\n\n    img: {\n        border: \"2px\",\n        borderColor: \"#fff\", \n        borderRadius: \"8px\",\n        padding: \"5px\",\n        width: \"100%\",\n        height:\"100%\",\n        \n      },\n\n    menuButton: {\n        marginRight: theme.spacing(2),\n      },\n    \n    buttons:{\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n            '& > *': {\n              margin: theme.spacing(2),\n            },\n            paddingBottom:\"10px\",\n        }\n    \n  }));\n\nfunction DenseAppBar(){\n    \n  return (\n        <AppBar position=\"static\">\n          <Toolbar variant=\"dense\" maxWidth=\"md\">\n            <Typography variant=\"h6\" color=\"inherit\">\n              Comics-Scraper\n            </Typography>\n          </Toolbar>\n        </AppBar>\n    );\n}\n\n\nfunction Api(props){\n\n  const classes = useStyles();\n  const [url,setUrl] = useState(\"https://comics-scraper-app.herokuapp.com/comics/heart-and-brain/\");\n  const [data,setData] = useState([]);\n  let prevButton, nextButton;\n  useEffect(() =>{\n    const fetchData = async () => {\n        const result = await axios(url);\n        setData(result.data);\n    };\n    fetchData();\n    window.scrollTo({\n      top: 0,\n      behavior: \"smooth\"\n    });\n  }, [url]);\n\n  const res = data[\"results\"] && data[\"results\"].map((tile, idx) =>(\n          <GridListTile key={tile.comic_link}>\n          <img className={classes.img} src={tile.comic_link} alt={tile.comic_title}/>\n          </GridListTile>\n          ))\n\n  if (data.previous === null){\n    prevButton = (<Button padding=\"5px\">Prev</Button>)\n  }else{\n    prevButton = (<Button onClick={() => setUrl(data.previous)} padding=\"5px\">Prev</Button>)\n  }\n\n  if (data.next === null){\n    nextButton = (<Button padding=\"5px\">Next</Button>)\n  }else{\n    nextButton = (<Button onClick={() => setUrl(data.next)} padding=\"5px\">Next</Button>)\n  }\n\n  return (<Container maxWidth=\"lg\">\n            <div className={classes.root}>\n              <GridList spacing={20} cellHeight={350} cols={2} justifyContent=\"center\">{res}</GridList>\n            </div>\n            <div className={classes.buttons}>\n              <ButtonGroup variant=\"text\" color=\"primary\" aria-label=\"text primary button group\">\n                {prevButton}\n                {nextButton}\n              </ButtonGroup>\n            </div>\n          </Container>)\n\n}\n\nexport default Api;\nexport {DenseAppBar};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App,{DenseAppBar} from './Api';\nimport * as serviceWorker from './serviceWorker';\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\n\n\nconst theme = createMuiTheme({\n  \n    palette: {\n      primary: {\n        main: '#1976d2',\n      },\n      secondary: {\n        main: '#ec407a',\n      },\n    },\n  });\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <MuiThemeProvider theme={theme}>\n    <App />\n    </MuiThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nReactDOM.render(\n  <React.StrictMode>\n  <MuiThemeProvider theme={theme}>\n    <DenseAppBar/>\n    </MuiThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('nav')\n\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}